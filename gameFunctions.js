// Generated by CoffeeScript 1.3.3
(function() {
  var Beam, Boss, Fighter, GameRunner, SVGObject, Tama,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SVGObject = (function() {

    function SVGObject(o) {
      this.ele = $("#" + o.id);
      this.params = o;
    }

    return SVGObject;

  })();

  Boss = (function(_super) {

    __extends(Boss, _super);

    function Boss() {
      return Boss.__super__.constructor.apply(this, arguments);
    }

    Boss.prototype.move_boss = function(degree) {
      var tempY;
      this.params.degree += degree;
      tempY = this.params.y + Math.cos(this.params.degree * Math.PI / 45) * 100;
      this.ele.attr("transform", "translate(" + this.params.x + "," + tempY + ")");
      return tempY;
    };

    return Boss;

  })(SVGObject);

  Fighter = (function(_super) {

    __extends(Fighter, _super);

    function Fighter() {
      return Fighter.__super__.constructor.apply(this, arguments);
    }

    Fighter.prototype.move_fighter = function(conf) {
      var pushDOWN, pushUP;
      pushUP = (this.params.y > 2) && (conf.kc === conf.upcode);
      if (pushUP) {
        this.params.y -= conf.speed;
      }
      pushDOWN = (this.params.y < 280) && (conf.kc === conf.downcode);
      if (pushDOWN) {
        this.params.y += conf.speed;
      }
      return this.ele.attr("transform", "translate(" + this.params.x + "," + this.params.y + ")");
    };

    return Fighter;

  })(SVGObject);

  Beam = (function(_super) {

    __extends(Beam, _super);

    function Beam() {
      return Beam.__super__.constructor.apply(this, arguments);
    }

    Beam.prototype.shot_beam = function(tempY, speed, boss) {
      if (this.params.flag === true) {
        this.params.x += speed;
      }
      if (this.params.x > this.params.limitX) {
        this.params.flag = false;
      }
      this.check1(tempY, boss);
      return this.ele.attr("transform", "translate(" + this.params.x + "," + this.params.y + ")");
    };

    Beam.prototype.check1 = function(tempY, bossObj) {
      var boss, xInRange, yInRange, _ref;
      boss = bossObj.params;
      xInRange = ((this.params.x - 62) < (_ref = boss.x) && _ref < (this.params.x + 20));
      yInRange = ((this.params.y - 86) < tempY && tempY < (this.params.y + 2));
      if (xInRange && yInRange) {
        $("#hit").html(boss.power);
        if (boss.power === 0) {
          alert("ミッション成功!!");
          boss.power = -1;
          location.reload();
          return;
        }
        boss.power -= 1;
        bossObj.ele.attr("fill", boss.colors[boss.power].color);
        this.params.flag = false;
        this.params.x = -100;
        return this.ele.attr("transform", "translate(" + this.params.x + "," + this.params.y + ")");
      }
    };

    return Beam;

  })(SVGObject);

  Tama = (function(_super) {

    __extends(Tama, _super);

    function Tama() {
      return Tama.__super__.constructor.apply(this, arguments);
    }

    Tama.prototype.shot_tama = function(tempY, speed, boss, fighter) {
      if (this.params.flag === true) {
        this.params.x -= speed;
        this.params.y += this.params.dy * speed;
        if (this.params.x < 0) {
          this.params.flag = false;
        }
        this.check2(fighter.params);
      } else {
        this.params.dy = (fighter.params.y - (tempY + 65)) / boss.params.x;
        this.params.y = tempY + 65;
        this.params.x = boss.params.x;
        this.params.flag = true;
      }
      this.params.degree += 10;
      return this.ele.attr("transform", "translate (" + this.params.x + "," + this.params.y + ") rotate(" + this.params.degree + ")");
    };

    Tama.prototype.check2 = function(fighter) {
      var xInRange, yInRange, _ref, _ref1;
      xInRange = ((this.params.x - 20) < (_ref = fighter.x) && _ref < (this.params.x + 20));
      yInRange = ((this.params.y - 15) < (_ref1 = fighter.y) && _ref1 < (this.params.y + 9));
      if (xInRange && yInRange) {
        alert("ゲームオーバー");
        fighter.x = -1;
        fighter.y = -1;
        location.reload();
      }
    };

    return Tama;

  })(SVGObject);

  GameRunner = (function() {

    function GameRunner(obj) {
      this.elements = {
        boss: new Boss(obj.boss),
        fighter: new Fighter(obj.fighter),
        tama: new Tama(obj.tama),
        beam: new Beam(obj.beam)
      };
    }

    GameRunner.prototype.initKeyEvent = function(o) {
      var es;
      es = this.elements;
      return window.addEventListener("keydown", function(evt) {
        var conf;
        evt.preventDefault();
        conf = {
          kc: evt.keyCode,
          speed: o.speed,
          upcode: o.upcode,
          downcode: o.downcode
        };
        return es.fighter.move_fighter(conf);
      }, true);
    };

    GameRunner.prototype.initMouseEvent = function() {
      var es;
      es = this.elements;
      return window.addEventListener("click", function(evt) {
        var beam;
        evt.preventDefault();
        beam = es.beam.params;
        if (beam.flag === true) {
          return;
        }
        beam.flag = true;
        beam.x = es.fighter.params.x + 20;
        return beam.y = es.fighter.params.y + 10;
      }, true);
    };

    GameRunner.prototype.setGameEvents = function(o) {
      var es;
      es = this.elements;
      return $("#" + o.id).click(function(evt) {
        var _this = this;
        evt.preventDefault();
        return setInterval(function() {
          var tempY;
          tempY = es.boss.move_boss(o.bossspeed);
          es.tama.shot_tama(tempY, o.tamaspeed, es.boss, es.fighter);
          return es.beam.shot_beam(tempY, o.beamspeed, es.boss);
        }, o.interval);
      });
    };

    return GameRunner;

  })();

  $.getJSON("data.json", function(o) {
    var fighter, runner;
    runner = new GameRunner(o);
    fighter = runner.elements.fighter;
    fighter.ele.attr("transform", "translate(" + fighter.params.x + "," + fighter.params.y + ")");
    return $.getJSON("setting.json", function(o) {
      var $btn;
      $btn = $("#" + o.basic.id).click(function() {
        return $(this).hide();
      });
      runner.setGameEvents(o.basic);
      runner.initKeyEvent(o.key);
      return runner.initMouseEvent();
    });
  });

}).call(this);
